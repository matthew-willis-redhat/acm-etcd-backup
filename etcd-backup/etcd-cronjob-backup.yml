kind: CronJob
apiVersion: batch/v1
metadata:
  name: cronjob-etcd-backup
  namespace: etcd-backup
  labels:
    app.kubernetes.io/name: cronjob-etcd-backup
spec:
  schedule: "15 04 * * *"
  concurrencyPolicy: Forbid
  suspend: false
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: cronjob-etcd-backup
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app.kubernetes.io/name: cronjob-etcd-backup
        spec:
          nodeSelector:
            node-role.kubernetes.io/master: ''
          restartPolicy: Never
          activeDeadlineSeconds: 500
          serviceAccountName: etcd-backup-sa
          hostPID: true
          hostNetwork: true
          enableServiceLinks: true
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          securityContext: {}
          containers:
            - name: cronjob-etcd-backup
              image: registry.redhat.io/openshift4/ose-cli
              terminationMessagePath: /dev/termination-log
              command:
              - /bin/bash
              - -c
              - |
                #!/usr/bin/env bash
                dateValue=$(date -R)
                contentType=""
                baseResourceDir=""
                hostBucket=""
                destinationBucketLocation=""
                cluster='{{ fromClusterClaim "name" }}'
                echo -e '\n\n---\nCleanup previous local etcd backups on local host\n'
                chroot /host find /home/core/backup/ -type d -mmin +"3" -exec rm -rf {} \;
                echo -e '\n\n---\nCreate etcd backup local to master\n'
                chroot /host /usr/local/bin/cluster-backup.sh /home/core/backup/$cluster
                echo -e '\n\n---\nFinding backup files to send to external storage\n'
                while true; do
                  if [[ $(find /host/home/core/backup/* -type d -cmin -1 | wc -c) -ne 0 ]]; then
                    for filepath in $(find /host/home/core/backup/* -type f); do
                      file=$(basename $filepath)                      
                      resource="${baseResourceDir}${cluster}/${file}"
                      stringToSign="PUT\n\n${contentType}\n${dateValue}\n${resource}"
                      signature=$(echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64)
                      echo -e '\n+++Sending file to external storage+++'
                      echo $file
                      echo -e '\n'
                      curl -X PUT -T "${filepath}" -H "Host: ${hostBucket}" -H "Date: ${dateValue}" -H "Content-Type: ${contentType}" -H "Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}" -L ${destinationBucketLocation}${cluster}/${file}
                    done
                    break
                  fi
                done
              securityContext:
                privileged: true
                runAsUser: 0
                capabilities:
                  add:
                    - SYS_CHROOT
              imagePullPolicy: Always
              env:
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: etcd-backup-secret
                    key: aws_access_key_id
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: etcd-backup-secret
                    key: aws_secret_access_key
              volumeMounts:
                - name: host
                  mountPath: /host
              terminationMessagePolicy: File
          volumes:
          - name: host
            hostPath:
              path: /
              type: Directory
          dnsPolicy: ClusterFirst
          tolerations:
          - key: node-role.kubernetes.io/master
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
